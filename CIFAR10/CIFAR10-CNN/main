from model import CNN
import torch
import torchvision
from matplotlib import pyplot as plt
import os


os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"



if __name__ == "__main__":
    
    #modelul
    model = CNN()
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.to(device)

    #loss function
    loss = torch.nn.CrossEntropyLoss()

    #hyperparametri
    lr = 0.003
    epochs = 10

    #optimizare
    optimizer = torch.optim.Adam(model.parameters(), lr)

    #transforms
    transforms = torchvision.transforms.Compose([torchvision.transforms.ToTensor(),
                                                 torchvision.transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5))])

    #training loop
    dataset_train = torchvision.datasets.CIFAR10("./files/", train = True, download = True, transform = transforms)
    dataset_validare = torchvision.datasets.CIFAR10("./files", train = False, download = True, transform = transforms)


    #datalaoder
    dataloader_train = torch.utils.data.DataLoader(dataset_train, shuffle = True, batch_size = 64)
    dataloader_validation = torch.utils.data.DataLoader(dataset_validare, shuffle = False, batch_size = 1)
    
    errors_train = []
    errors_validation =[]

    #training
    for epoch in range(epochs):
        print(epoch)
        errors_temp = []
        model.train()
        for image, label in dataloader_train:
            image, label = image.to(device), label.to(device)
            #print('f')
            #image = image.view(16, 3*32*32)
            #print('f')
            # curatare gradienti
            optimizer.zero_grad()

            #pred
            pred = model(image)
            pred = pred.to(device)
           
            #calcul eroare
            error = loss(pred, label)
           # print(error)
            errors_temp.append(error.item())

            #gradienti
            error.backward()

            #actualizare
            optimizer.step()

        model.eval()
        with torch.no_grad():
            acc = []
            for images, labels in dataloader_validation:
                #images = images.view(images.shape[0], -1)
                images, labels = images.to(device), labels.to(device)
                test_output = model(images)
                pred_y = torch.max(test_output, 1)[1].data.squeeze()
                accuracy = (pred_y == labels).sum().item()
                acc.append(accuracy)
        print(f'Acuratete: {(sum(acc)/len(acc)*100)}')


        #VALIDATION   
        errors_temp_validation = []
        model.eval()
        for image, label in dataloader_validation:
            image, label = image.to(device), label.to(device)
            #flat
            #image = image.view(1,3*32*32)

            #pred
            pred = model(image)
            pred = pred.to(device)
            #calcul eroare
            error = loss(pred, label)
           # print(error)
            errors_temp_validation.append(error.item())

        
        eroare_medie_per_epoca = sum(errors_temp)/len(errors_temp)
        eroare_medie_per_epoca_valid = sum(errors_temp_validation)/len(errors_temp_validation)


        errors_train.append(eroare_medie_per_epoca)
        errors_validation.append(eroare_medie_per_epoca_valid)

        print(f"eroare per {epoch} : {eroare_medie_per_epoca} eroare per epoca valid:{eroare_medie_per_epoca_valid}")

    plt.plot(errors_validation, label = 'Error Valid')
    plt.plot(errors_train, label = 'Error train')
    plt.legend()
    plt.show()
